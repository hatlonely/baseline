#include <gtest/gtest.h>
#include <iostream>
#include "big_int.hpp"

int main(int argc, char* argv[]) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

TEST(testBigInt, caseToString) {
    EXPECT_EQ(1234567890_bi .ToString(), "1234567890");
    EXPECT_EQ(01234_bi .ToString(), "1234");
    EXPECT_EQ(123456_bi .ToString(), "123456");
    EXPECT_EQ(123_bi .ToString(), "123");
    EXPECT_EQ(BigInt(12345).ToString(), "12345");
    EXPECT_EQ(BigInt(0).ToString(), "0");
    EXPECT_EQ(BigInt("-1234").ToString(), "-1234");
    EXPECT_EQ(BigInt(-1234).ToString(), "-1234");
}

TEST(testBigInt, caseAdd) {
    EXPECT_EQ(123_bi + 456_bi, 579_bi);
    EXPECT_EQ(37164793690750742753172653515137753_bi + 8620337336594671625718755195380_bi, 37173414028087337424798372270333133_bi);
    {
        auto bi = 37164793690750742753172653515137753_bi;
        bi += 8620337336594671625718755195380_bi;
        EXPECT_EQ(bi, 37173414028087337424798372270333133_bi);
    }
    {
        auto bi = 8620337336594671625718755195380_bi;
        bi += 37164793690750742753172653515137753_bi;
        EXPECT_EQ(bi, 37173414028087337424798372270333133_bi);
    }

    EXPECT_EQ(1234_bi .AddShiftAbs(35, 1), 1234 + 35 * kFactor);
    EXPECT_EQ(1234_bi .AddShiftAbs(35, 2), 1234 + 35 * kFactor * kFactor);
    EXPECT_EQ(BigInt(1234 + 35 * kFactor * kFactor).SubShiftAbs(35, 2), 1234_bi);
}

TEST(testBigInt, caseSub) {
    EXPECT_EQ(456_bi - 123_bi, 333_bi);
    EXPECT_EQ(123_bi - 456_bi, BigInt(-333));
    EXPECT_EQ(37173414028087337424798372270333133_bi - 8620337336594671625718755195380_bi, 37164793690750742753172653515137753_bi);
    EXPECT_EQ(8620337336594671625718755195380_bi - 37173414028087337424798372270333133_bi, BigInt("-37164793690750742753172653515137753"));
}

TEST(testBigInt, caseMul) {
    EXPECT_EQ(1234_bi * 4567_bi, 5635678_bi);
    EXPECT_EQ(8620337336594671625718755195380_bi * 37164793690750742753172653515137753_bi, 320373058659216713908486537764172710546891667367504504445129181140_bi);
    EXPECT_EQ(BigInt("-8620337336594671625718755195380") * BigInt("-37164793690750742753172653515137753"), 320373058659216713908486537764172710546891667367504504445129181140_bi);
    EXPECT_EQ(BigInt("8620337336594671625718755195380") * BigInt("-37164793690750742753172653515137753"), BigInt("-320373058659216713908486537764172710546891667367504504445129181140"));
    EXPECT_EQ(8620337336594671625718755195380_bi * 123, 1060301492401144609963406889031740_bi);
}

TEST(testBigInt, caseCompare) {
    EXPECT_TRUE(123_bi == 123_bi);
    EXPECT_TRUE(1234_bi == 1234_bi);

    EXPECT_TRUE(12345_bi < 123456_bi);
    EXPECT_TRUE(100_bi < 1000_bi);
    EXPECT_TRUE(123456_bi > 12345_bi);
    EXPECT_TRUE(1000_bi > 100_bi);

    EXPECT_FALSE(10_bi > 10_bi);
    EXPECT_FALSE(10_bi < 10_bi);

    EXPECT_TRUE(0_bi < 1_bi);
}

TEST(testBigInt, caseIncrement) {
    auto i = 0_bi;
    EXPECT_EQ(++i, 1_bi);
    EXPECT_EQ(++i, 2_bi);

    i = 999_bi;
    EXPECT_EQ(++i, 1000_bi);
}

TEST(testBigInt, casePower) {
    EXPECT_EQ(2_bi ^ 10_bi, 1024_bi);
    EXPECT_EQ(10_bi ^ 40_bi, 10000000000000000000000000000000000000000_bi);
}
